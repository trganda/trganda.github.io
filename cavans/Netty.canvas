{
	"nodes":[
		{"type":"group","id":"555ed9827c240cc9","x":-300,"y":-50,"width":1480,"height":550,"color":"2","label":"POJO"},
		{"type":"text","text":"`ByteToMessageDecoder`","id":"022693b36f2ff4b8","x":-125,"y":-30,"width":250,"height":60},
		{"type":"text","text":"```java\npublic class TimeDecoder extends ByteToMessageDecoder { // (1)\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) { // (2)\n        if (in.readableBytes() < 4) {\n            return; // (3)\n        }\n        \n        out.add(new UnixTime(in.readUnsignedInt()));\n    }\n}\n```","id":"ae5295fe1d50b884","x":-280,"y":160,"width":560,"height":320},
		{"type":"text","text":"```java\npublic class TimeEncoder extends MessageToByteEncoder<UnixTime> {\n    @Override\n    protected void encode(ChannelHandlerContext ctx, UnixTime msg, ByteBuf out) {\n        out.writeInt((int)msg.value());\n    }\n}\n```","id":"6b3926ee5b9364fc","x":600,"y":160,"width":560,"height":260},
		{"type":"text","text":"`MessageToByteEncoder<T>`","id":"464506f31585d517","x":740,"y":-30,"width":280,"height":60},
		{"type":"text","text":"使用工具类 ByteToMessageDecoder 和 MessageToByteEncoder 配合 POJO 类来定义数据流格式。这种方式对于复杂协议的实现会更加方便，且易于维护。","id":"997debe855c62831","x":-800,"y":-30,"width":250,"height":255,"color":"2"},
		{"type":"text","text":"```java\nEventLoopGroup bossGroup = new NioEventLoopGroup(); // (1)\nEventLoopGroup workerGroup = new NioEventLoopGroup();\ntry {\n\tServerBootstrap b = new ServerBootstrap(); // (2)\n\tb.group(bossGroup, workerGroup)\n\t .channel(NioServerSocketChannel.class) // (3)\n\t .childHandler(new ChannelInitializer<SocketChannel>() { // (4)\n\t\t @Override\n\t\t public void initChannel(SocketChannel ch) throws Exception {\n\t\t\t ch.pipeline().addLast(new TimeEncoder()).addLast(new TimeServerHandler());\n\t\t }\n\t })\n\t .option(ChannelOption.SO_BACKLOG, 128)          // (5)\n\t .childOption(ChannelOption.SO_KEEPALIVE, true); // (6)\n\n\t// Bind and start to accept incoming connections.\n\tChannelFuture f = b.bind(port).sync(); // (7)\n\n\t// Wait until the server socket is closed.\n\t// In this example, this does not happen, but you can do that to gracefully\n\t// shut down your server.\n\tf.channel().closeFuture().sync();\n} finally {\n\tworkerGroup.shutdownGracefully();\n\tbossGroup.shutdownGracefully();\n}\n```","id":"a2bcb2ef18a792d5","x":-1005,"y":-920,"width":660,"height":701,"color":"1"},
		{"type":"text","text":"TCP/IP 服务端示例，配合 ServerBootstrap 工具类创建服务端\n\n- bossGroup 负责处理一个 TCP 连接\n- workerGroup 负责处理连接建立后的内容，为 bossGroup 的子 Event\n\n`NioEventLoopGroup` 是一个多线程的异步 IO 的 Event Loop\n\n`Channel` 类型选择 `NioServerSocketChannel`，用于接收连接\n\n`childHandler` 方法，用于指定 channel 对应的 handler，它会被前面指定的 channel 调用。`ChannelInitializer` 为工具类，协助创建一个 `handler` 的 `pipeline`，逐一处理 `channel` 接收的数据。","id":"56663db6de5bbb79","x":-1645,"y":-817,"width":362,"height":495,"color":"1"},
		{"type":"text","text":"```java\npublic class TimeServerHandler extends ChannelInboundHandlerAdapter {\n\n    @Override\n    public void channelActive(final ChannelHandlerContext ctx) { // (1)\n        final ByteBuf time = ctx.alloc().buffer(4); // (2)\n        time.writeInt((int) (System.currentTimeMillis() / 1000L + 2208988800L));\n        \n        final ChannelFuture f = ctx.writeAndFlush(time); // (3)\n        f.addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) {\n                assert f == future;\n                ctx.close();\n            }\n        }); // (4)\n    }\n    \n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```","id":"fe300404258cf1f5","x":-20,"y":-884,"width":660,"height":629},
		{"id":"1615ee45afada1c3","x":-1632,"y":-80,"width":337,"height":60,"type":"text","text":"[Netty User Guide](https://netty.io/wiki/user-guide-for-4.x.html#wiki-h3-6)"}
	],
	"edges":[
		{"id":"4388095ee8ad866b","fromNode":"022693b36f2ff4b8","fromSide":"bottom","toNode":"ae5295fe1d50b884","toSide":"top"},
		{"id":"80e25158deb0d45b","fromNode":"464506f31585d517","fromSide":"bottom","toNode":"6b3926ee5b9364fc","toSide":"top"},
		{"id":"66db595eddd7d04f","fromNode":"022693b36f2ff4b8","fromSide":"right","toNode":"464506f31585d517","toSide":"left","fromEnd":"arrow"},
		{"id":"0da066263a7bb5df","fromNode":"997debe855c62831","fromSide":"right","toNode":"555ed9827c240cc9","toSide":"left"},
		{"id":"4affb3a85733ead3","fromNode":"56663db6de5bbb79","fromSide":"right","toNode":"a2bcb2ef18a792d5","toSide":"left"},
		{"id":"0e5d61d761aa2f1f","fromNode":"a2bcb2ef18a792d5","fromSide":"right","toNode":"fe300404258cf1f5","toSide":"left"},
		{"id":"019f7bd799728bf5","fromNode":"a2bcb2ef18a792d5","fromSide":"bottom","toNode":"997debe855c62831","toSide":"top"},
		{"id":"6825da778c890c3d","fromNode":"56663db6de5bbb79","fromSide":"bottom","toNode":"1615ee45afada1c3","toSide":"top"}
	]
}